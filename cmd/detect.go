package cmd

import (
	"fmt"
	"strings"

	"github.com/mvcbotelho/code-explainer/openai"
	"github.com/spf13/cobra"
)

var (
	detectCodeInput   string
	detectFilePath    string
	detectInteractive bool
)

// detectCmd representa o comando detect
var detectCmd = &cobra.Command{
	Use:   "detect",
	Short: "Detecta a linguagem de programa√ß√£o de um c√≥digo",
	Long: `Detecta automaticamente a linguagem de programa√ß√£o de um trecho de c√≥digo.

Linguagens suportadas:
‚Ä¢ Go, Python, JavaScript, C, Java, PHP, Rust, C#

Voc√™ pode fornecer o c√≥digo de tr√™s formas:
1. Via flag --code: code-explainer detect --code "func main() {}"
2. Via arquivo: code-explainer detect --file main.go
3. Interativo: code-explainer detect (digite o c√≥digo e pressione Ctrl+D)

Exemplos:
  code-explainer detect --code "print('Hello World')"
  code-explainer detect --file script.py
  code-explainer detect --code "console.log('Hello')" --verbose`,
	RunE: runDetect,
}

func init() {
	rootCmd.AddCommand(detectCmd)

	// Flags espec√≠ficas do comando detect
	detectCmd.Flags().StringVarP(&detectCodeInput, "code", "c", "", "C√≥digo para detectar linguagem")
	detectCmd.Flags().StringVarP(&detectFilePath, "file", "f", "", "Arquivo contendo o c√≥digo")
	detectCmd.Flags().BoolVarP(&detectInteractive, "interactive", "i", false, "Modo interativo")

	// Marcar flags como mutuamente exclusivas
	detectCmd.MarkFlagsMutuallyExclusive("code", "file", "interactive")
}

func runDetect(cmd *cobra.Command, args []string) error {
	var code string
	var err error

	// Determinar a fonte do c√≥digo
	switch {
	case detectCodeInput != "":
		code = detectCodeInput
		if verbose {
			fmt.Printf("üìù Usando c√≥digo fornecido via flag\n")
		}

	case detectFilePath != "":
		code, err = readFile(detectFilePath)
		if err != nil {
			return fmt.Errorf("erro ao ler arquivo %s: %w", detectFilePath, err)
		}
		if verbose {
			fmt.Printf("üìÅ Lendo c√≥digo do arquivo: %s\n", detectFilePath)
		}

	case detectInteractive || (detectCodeInput == "" && detectFilePath == ""):
		code, err = readInteractive()
		if err != nil {
			return fmt.Errorf("erro ao ler entrada interativa: %w", err)
		}
		if verbose {
			fmt.Printf("‚å®Ô∏è  Usando entrada interativa\n")
		}

	default:
		return fmt.Errorf("forne√ßa o c√≥digo via --code, --file ou use modo interativo")
	}

	if code == "" {
		return fmt.Errorf("c√≥digo vazio fornecido")
	}

	// Detectar linguagem
	detectedLang := openai.DetectLanguage(code)

	// Formatar sa√≠da
	outputText := formatDetectOutput(code, detectedLang)

	// Escrever sa√≠da
	if output != "" {
		err = writeToFile(output, outputText)
		if err != nil {
			return fmt.Errorf("erro ao escrever arquivo de sa√≠da: %w", err)
		}
		if verbose {
			fmt.Printf("üíæ Resultado salvo em: %s\n", output)
		}
	} else {
		fmt.Println(outputText)
	}

	return nil
}

// formatDetectOutput formata a sa√≠da da detec√ß√£o
func formatDetectOutput(code, language string) string {
	var output strings.Builder

	output.WriteString("üîç Detec√ß√£o de Linguagem\n")
	output.WriteString(strings.Repeat("=", 30) + "\n\n")

	output.WriteString("üíª **C√≥digo analisado:**\n")
	output.WriteString("```\n")
	output.WriteString(code)
	output.WriteString("\n```\n\n")

	output.WriteString("üéØ **Linguagem detectada:** ")
	if language == "linguagem desconhecida" {
		output.WriteString("‚ùì " + language)
	} else {
		output.WriteString("‚úÖ " + language)
	}
	output.WriteString("\n\n")

	// Adicionar informa√ß√µes extras se verbose
	if verbose {
		output.WriteString("üìä **Informa√ß√µes:**\n")
		output.WriteString(fmt.Sprintf("‚Ä¢ Tamanho do c√≥digo: %d caracteres\n", len(code)))
		output.WriteString(fmt.Sprintf("‚Ä¢ Linhas de c√≥digo: %d\n", len(strings.Split(code, "\n"))))

		// Listar linguagens suportadas
		supportedLangs := openai.GetSupportedLanguages()
		output.WriteString("‚Ä¢ Linguagens suportadas: " + strings.Join(supportedLangs, ", ") + "\n")
	}

	return output.String()
}
